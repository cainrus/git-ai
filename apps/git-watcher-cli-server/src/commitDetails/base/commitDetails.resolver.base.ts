/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CommitDetails } from "./CommitDetails";
import { CommitDetailsCountArgs } from "./CommitDetailsCountArgs";
import { CommitDetailsFindManyArgs } from "./CommitDetailsFindManyArgs";
import { CommitDetailsFindUniqueArgs } from "./CommitDetailsFindUniqueArgs";
import { CreateCommitDetailsArgs } from "./CreateCommitDetailsArgs";
import { UpdateCommitDetailsArgs } from "./UpdateCommitDetailsArgs";
import { DeleteCommitDetailsArgs } from "./DeleteCommitDetailsArgs";
import { CommitDetailsService } from "../commitDetails.service";
@graphql.Resolver(() => CommitDetails)
export class CommitDetailsResolverBase {
  constructor(protected readonly service: CommitDetailsService) {}

  async _commitDetailsItemsMeta(
    @graphql.Args() args: CommitDetailsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [CommitDetails])
  async commitDetailsItems(
    @graphql.Args() args: CommitDetailsFindManyArgs
  ): Promise<CommitDetails[]> {
    return this.service.commitDetailsItems(args);
  }

  @graphql.Query(() => CommitDetails, { nullable: true })
  async commitDetails(
    @graphql.Args() args: CommitDetailsFindUniqueArgs
  ): Promise<CommitDetails | null> {
    const result = await this.service.commitDetails(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => CommitDetails)
  async createCommitDetails(
    @graphql.Args() args: CreateCommitDetailsArgs
  ): Promise<CommitDetails> {
    return await this.service.createCommitDetails({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => CommitDetails)
  async updateCommitDetails(
    @graphql.Args() args: UpdateCommitDetailsArgs
  ): Promise<CommitDetails | null> {
    try {
      return await this.service.updateCommitDetails({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CommitDetails)
  async deleteCommitDetails(
    @graphql.Args() args: DeleteCommitDetailsArgs
  ): Promise<CommitDetails | null> {
    try {
      return await this.service.deleteCommitDetails(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
