/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, CommitDetails as PrismaCommitDetails } from "@prisma/client";

export class CommitDetailsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CommitDetailsCountArgs, "select">
  ): Promise<number> {
    return this.prisma.commitDetails.count(args);
  }

  async commitDetailsItems(
    args: Prisma.CommitDetailsFindManyArgs
  ): Promise<PrismaCommitDetails[]> {
    return this.prisma.commitDetails.findMany(args);
  }
  async commitDetails(
    args: Prisma.CommitDetailsFindUniqueArgs
  ): Promise<PrismaCommitDetails | null> {
    return this.prisma.commitDetails.findUnique(args);
  }
  async createCommitDetails(
    args: Prisma.CommitDetailsCreateArgs
  ): Promise<PrismaCommitDetails> {
    return this.prisma.commitDetails.create(args);
  }
  async updateCommitDetails(
    args: Prisma.CommitDetailsUpdateArgs
  ): Promise<PrismaCommitDetails> {
    return this.prisma.commitDetails.update(args);
  }
  async deleteCommitDetails(
    args: Prisma.CommitDetailsDeleteArgs
  ): Promise<PrismaCommitDetails> {
    return this.prisma.commitDetails.delete(args);
  }
}
