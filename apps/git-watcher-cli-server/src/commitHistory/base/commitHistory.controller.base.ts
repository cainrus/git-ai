/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CommitHistoryService } from "../commitHistory.service";
import { CommitHistoryCreateInput } from "./CommitHistoryCreateInput";
import { CommitHistory } from "./CommitHistory";
import { CommitHistoryFindManyArgs } from "./CommitHistoryFindManyArgs";
import { CommitHistoryWhereUniqueInput } from "./CommitHistoryWhereUniqueInput";
import { CommitHistoryUpdateInput } from "./CommitHistoryUpdateInput";

export class CommitHistoryControllerBase {
  constructor(protected readonly service: CommitHistoryService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CommitHistory })
  async createCommitHistory(
    @common.Body() data: CommitHistoryCreateInput
  ): Promise<CommitHistory> {
    return await this.service.createCommitHistory({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        commitMessage: true,
        committedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [CommitHistory] })
  @ApiNestedQuery(CommitHistoryFindManyArgs)
  async commitHistories(
    @common.Req() request: Request
  ): Promise<CommitHistory[]> {
    const args = plainToClass(CommitHistoryFindManyArgs, request.query);
    return this.service.commitHistories({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        commitMessage: true,
        committedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CommitHistory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async commitHistory(
    @common.Param() params: CommitHistoryWhereUniqueInput
  ): Promise<CommitHistory | null> {
    const result = await this.service.commitHistory({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        commitMessage: true,
        committedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CommitHistory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCommitHistory(
    @common.Param() params: CommitHistoryWhereUniqueInput,
    @common.Body() data: CommitHistoryUpdateInput
  ): Promise<CommitHistory | null> {
    try {
      return await this.service.updateCommitHistory({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          commitMessage: true,
          committedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CommitHistory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCommitHistory(
    @common.Param() params: CommitHistoryWhereUniqueInput
  ): Promise<CommitHistory | null> {
    try {
      return await this.service.deleteCommitHistory({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          commitMessage: true,
          committedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
