/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CommitHistory } from "./CommitHistory";
import { CommitHistoryCountArgs } from "./CommitHistoryCountArgs";
import { CommitHistoryFindManyArgs } from "./CommitHistoryFindManyArgs";
import { CommitHistoryFindUniqueArgs } from "./CommitHistoryFindUniqueArgs";
import { CreateCommitHistoryArgs } from "./CreateCommitHistoryArgs";
import { UpdateCommitHistoryArgs } from "./UpdateCommitHistoryArgs";
import { DeleteCommitHistoryArgs } from "./DeleteCommitHistoryArgs";
import { CommitHistoryService } from "../commitHistory.service";
@graphql.Resolver(() => CommitHistory)
export class CommitHistoryResolverBase {
  constructor(protected readonly service: CommitHistoryService) {}

  async _commitHistoriesMeta(
    @graphql.Args() args: CommitHistoryCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [CommitHistory])
  async commitHistories(
    @graphql.Args() args: CommitHistoryFindManyArgs
  ): Promise<CommitHistory[]> {
    return this.service.commitHistories(args);
  }

  @graphql.Query(() => CommitHistory, { nullable: true })
  async commitHistory(
    @graphql.Args() args: CommitHistoryFindUniqueArgs
  ): Promise<CommitHistory | null> {
    const result = await this.service.commitHistory(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => CommitHistory)
  async createCommitHistory(
    @graphql.Args() args: CreateCommitHistoryArgs
  ): Promise<CommitHistory> {
    return await this.service.createCommitHistory({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => CommitHistory)
  async updateCommitHistory(
    @graphql.Args() args: UpdateCommitHistoryArgs
  ): Promise<CommitHistory | null> {
    try {
      return await this.service.updateCommitHistory({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CommitHistory)
  async deleteCommitHistory(
    @graphql.Args() args: DeleteCommitHistoryArgs
  ): Promise<CommitHistory | null> {
    try {
      return await this.service.deleteCommitHistory(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
