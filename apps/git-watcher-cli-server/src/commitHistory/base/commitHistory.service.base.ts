/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, CommitHistory as PrismaCommitHistory } from "@prisma/client";

export class CommitHistoryServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CommitHistoryCountArgs, "select">
  ): Promise<number> {
    return this.prisma.commitHistory.count(args);
  }

  async commitHistories(
    args: Prisma.CommitHistoryFindManyArgs
  ): Promise<PrismaCommitHistory[]> {
    return this.prisma.commitHistory.findMany(args);
  }
  async commitHistory(
    args: Prisma.CommitHistoryFindUniqueArgs
  ): Promise<PrismaCommitHistory | null> {
    return this.prisma.commitHistory.findUnique(args);
  }
  async createCommitHistory(
    args: Prisma.CommitHistoryCreateArgs
  ): Promise<PrismaCommitHistory> {
    return this.prisma.commitHistory.create(args);
  }
  async updateCommitHistory(
    args: Prisma.CommitHistoryUpdateArgs
  ): Promise<PrismaCommitHistory> {
    return this.prisma.commitHistory.update(args);
  }
  async deleteCommitHistory(
    args: Prisma.CommitHistoryDeleteArgs
  ): Promise<PrismaCommitHistory> {
    return this.prisma.commitHistory.delete(args);
  }
}
