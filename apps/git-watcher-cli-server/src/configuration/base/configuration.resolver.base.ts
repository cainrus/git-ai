/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Configuration } from "./Configuration";
import { ConfigurationCountArgs } from "./ConfigurationCountArgs";
import { ConfigurationFindManyArgs } from "./ConfigurationFindManyArgs";
import { ConfigurationFindUniqueArgs } from "./ConfigurationFindUniqueArgs";
import { CreateConfigurationArgs } from "./CreateConfigurationArgs";
import { UpdateConfigurationArgs } from "./UpdateConfigurationArgs";
import { DeleteConfigurationArgs } from "./DeleteConfigurationArgs";
import { ConfigurationService } from "../configuration.service";
@graphql.Resolver(() => Configuration)
export class ConfigurationResolverBase {
  constructor(protected readonly service: ConfigurationService) {}

  async _configurationsMeta(
    @graphql.Args() args: ConfigurationCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Configuration])
  async configurations(
    @graphql.Args() args: ConfigurationFindManyArgs
  ): Promise<Configuration[]> {
    return this.service.configurations(args);
  }

  @graphql.Query(() => Configuration, { nullable: true })
  async configuration(
    @graphql.Args() args: ConfigurationFindUniqueArgs
  ): Promise<Configuration | null> {
    const result = await this.service.configuration(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Configuration)
  async createConfiguration(
    @graphql.Args() args: CreateConfigurationArgs
  ): Promise<Configuration> {
    return await this.service.createConfiguration({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Configuration)
  async updateConfiguration(
    @graphql.Args() args: UpdateConfigurationArgs
  ): Promise<Configuration | null> {
    try {
      return await this.service.updateConfiguration({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Configuration)
  async deleteConfiguration(
    @graphql.Args() args: DeleteConfigurationArgs
  ): Promise<Configuration | null> {
    try {
      return await this.service.deleteConfiguration(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
