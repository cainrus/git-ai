/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GraphService } from "../graph.service";
import { GraphCreateInput } from "./GraphCreateInput";
import { Graph } from "./Graph";
import { GraphFindManyArgs } from "./GraphFindManyArgs";
import { GraphWhereUniqueInput } from "./GraphWhereUniqueInput";
import { GraphUpdateInput } from "./GraphUpdateInput";

export class GraphControllerBase {
  constructor(protected readonly service: GraphService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Graph })
  async createGraph(@common.Body() data: GraphCreateInput): Promise<Graph> {
    return await this.service.createGraph({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        fileName: true,
        dependencies: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Graph] })
  @ApiNestedQuery(GraphFindManyArgs)
  async graphs(@common.Req() request: Request): Promise<Graph[]> {
    const args = plainToClass(GraphFindManyArgs, request.query);
    return this.service.graphs({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        fileName: true,
        dependencies: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Graph })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async graph(
    @common.Param() params: GraphWhereUniqueInput
  ): Promise<Graph | null> {
    const result = await this.service.graph({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        fileName: true,
        dependencies: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Graph })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateGraph(
    @common.Param() params: GraphWhereUniqueInput,
    @common.Body() data: GraphUpdateInput
  ): Promise<Graph | null> {
    try {
      return await this.service.updateGraph({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          fileName: true,
          dependencies: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Graph })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteGraph(
    @common.Param() params: GraphWhereUniqueInput
  ): Promise<Graph | null> {
    try {
      return await this.service.deleteGraph({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          fileName: true,
          dependencies: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
