/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Graph } from "./Graph";
import { GraphCountArgs } from "./GraphCountArgs";
import { GraphFindManyArgs } from "./GraphFindManyArgs";
import { GraphFindUniqueArgs } from "./GraphFindUniqueArgs";
import { CreateGraphArgs } from "./CreateGraphArgs";
import { UpdateGraphArgs } from "./UpdateGraphArgs";
import { DeleteGraphArgs } from "./DeleteGraphArgs";
import { GraphService } from "../graph.service";
@graphql.Resolver(() => Graph)
export class GraphResolverBase {
  constructor(protected readonly service: GraphService) {}

  async _graphsMeta(
    @graphql.Args() args: GraphCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Graph])
  async graphs(@graphql.Args() args: GraphFindManyArgs): Promise<Graph[]> {
    return this.service.graphs(args);
  }

  @graphql.Query(() => Graph, { nullable: true })
  async graph(
    @graphql.Args() args: GraphFindUniqueArgs
  ): Promise<Graph | null> {
    const result = await this.service.graph(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Graph)
  async createGraph(@graphql.Args() args: CreateGraphArgs): Promise<Graph> {
    return await this.service.createGraph({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Graph)
  async updateGraph(
    @graphql.Args() args: UpdateGraphArgs
  ): Promise<Graph | null> {
    try {
      return await this.service.updateGraph({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Graph)
  async deleteGraph(
    @graphql.Args() args: DeleteGraphArgs
  ): Promise<Graph | null> {
    try {
      return await this.service.deleteGraph(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
